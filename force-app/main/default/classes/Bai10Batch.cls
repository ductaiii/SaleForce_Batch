// 10. Batch k·∫øt h·ª£p Chain (ch·∫°y batch kh√°c sau khi xong)
// M·ª•c ti√™u: S·ª≠ d·ª•ng Database.Stateful v√† chaining.
// start: Query Account
// execute: Update ho·∫∑c debug
// finish: G·ªçi Database.executeBatch(new AnotherBatchClass()) ƒë·ªÉ ch·∫°y ti·∫øp batch kh√°c
// B·∫°n c√≥ 2 c√¥ng vi·ªác c·∫ßn l√†m tu·∫ßn t·ª±:

// Batch 1: R·ª≠a ch√©n (l√†m s·∫°ch d·ªØ li·ªáu).

// Batch 2: Lau b√†n (x·ª≠ l√Ω ti·∫øp d·ªØ li·ªáu).

// B·∫°n mu·ªën: ch·ªâ lau b√†n sau khi ƒë√£ r·ª≠a ch√©n xong.
// üëâ ƒê√¢y ch√≠nh l√† batch chaining.
global with sharing class Bai10Batch implements Database.Batchable<SObject>, Database.Stateful {
    global Database.QueryLocator start(Database.BatchableContext bc) {
        return Database.getQueryLocator('SELECT Id FROM Account');
    }

    global void execute(Database.BatchableContext bc, List<SObject> scope) {
        List<Account> accsToUpdate = new List<Account>();
        for (SObject s : scope) {
            Account acc = (Account)s;
            acc.Description = 'ƒê√£ r·ª≠a ch√©n'; // v√≠ d·ª•: c·∫≠p nh·∫≠t d·ªØ li·ªáu
            accsToUpdate.add(acc);
        }
        if (!accsToUpdate.isEmpty()) {
            update accsToUpdate;
        }
    }

    global void finish(Database.BatchableContext bc) {
        System.debug('Xong Batch 1: R·ª≠a ch√©n.');

        // G·ªçi batch lau b√†n
        Database.executeBatch(new Bai10SecondBatch(), 200);
    }
}